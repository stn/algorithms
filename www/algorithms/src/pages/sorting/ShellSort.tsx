import React from 'react'
import { Scatter } from 'react-chartjs-2'

import Markdown from '../../components/Markdown'

const data = {
  datasets: [
    {
      label: 'BM_ShellSortAsc',
      data: [
        { x: 8, y: 0.2852188646933788 },
        { x: 16, y: 0.3066150041098972 },
        { x: 32, y: 0.33246619235324953 },
        { x: 64, y: 0.43393485762008993 },
        { x: 128, y: 0.6495581284854378 },
        { x: 256, y: 1.0181952539618984 },
        { x: 512, y: 1.969312559504897 },
        { x: 1024, y: 3.7050846120135974 },
        { x: 2048, y: 8.98547561429855 },
        { x: 4096, y: 20.86769790378761 },
        { x: 8192, y: 40.05596528839243 },
        { x: 16384, y: 89.85695968359738 },
        { x: 32768, y: 210.45076032287554 },
      ],
      backgroundColor: 'rgba(255, 99, 132)',
      borderColor: 'rgba(255, 99, 132, 0.2)',
      showLine: true,
    },
    {
      label: 'BM_ShellSortDesc',
      data: [
        { x: 8, y: 0.2975711287346104 },
        { x: 16, y: 0.32999188055897954 },
        { x: 32, y: 0.40784442181876446 },
        { x: 64, y: 0.5994321291377509 },
        { x: 128, y: 0.9003225096462513 },
        { x: 256, y: 1.6998210717050584 },
        { x: 512, y: 3.4908138714212895 },
        { x: 1024, y: 7.650694400820247 },
        { x: 2048, y: 16.773482419704465 },
        { x: 4096, y: 36.264404626361895 },
        { x: 8192, y: 73.94149835160529 },
        { x: 16384, y: 168.103568165217 },
        { x: 32768, y: 337.7065401069096 },
      ],
      backgroundColor: 'rgba(54, 162, 235)',
      borderColor: 'rgba(54, 162, 235, 0.2)',
      showLine: true,
    },
    {
      label: 'BM_ShellSortRandom',
      data: [
        { x: 8, y: 0.3240904759193789 },
        { x: 16, y: 0.4443515655750164 },
        { x: 32, y: 0.6770009895511935 },
        { x: 64, y: 1.3876460653178986 },
        { x: 128, y: 3.0535360794262947 },
        { x: 256, y: 6.612171282893575 },
        { x: 512, y: 15.241072383798768 },
        { x: 1024, y: 33.10720905432392 },
        { x: 2048, y: 77.74940557344642 },
        { x: 4096, y: 175.5171951219474 },
        { x: 8192, y: 380.79484590341593 },
        { x: 16384, y: 851.3973418491145 },
        { x: 32768, y: 1882.571013333385 },
      ],
      backgroundColor: 'rgba(255, 206, 86)',
      borderColor: 'rgba(255, 206, 86, 0.2)',
      showLine: true,
    },
  ],
  options: {
    responsive: true,
  },
}

function ShellSort() {
  return (
    <>
      <h2>Shell Sort</h2>
      <div>
        <Markdown>{`
要素を1つずつ隣としか比較移動しないのでは、一番小さな要素が一番右にあったとき、それを一番左にもってくるのにNステップかかる。
これが、bubble sortやinsertion sortの計算量が$O(n^2)$となる本質的な点である。

shellsortでは遠くの要素と比較交換することで高速化を図る。

互いにh要素分だけ離れた要素の集まりからなる部分ファイルを整列する。
これを大きなhから初め、最後にh=1までhを小さくしていくことで完全にソートされた配列を得る。

~~~c++
void shell_sort(int *arr, int n) {
  // Knuth series
  int h = 1;
  while (h <= n / 9) {
      h = 3 * h + 1;
  }
  for (; h > 0; h /= 3) {
      for (int i = h; i < n; ++i) {
          int v = arr[i];
          int j;
          for (j = i; j >= h && v < arr[j - h]; j -= h) {
              arr[j] = arr[j - h];
          }
          arr[j] = v;
      }
  }
}
~~~

        `}</Markdown>
        <Scatter data={data} />

        <Markdown>{`
グラフの形は$O(n)$に近い形となる。実際には$O(n \\log n)$。

shellsortのhをどういう数列にするとよいかは、まだ良くわかっていない。
        `}</Markdown>
      </div>
    </>
  )
}

export default ShellSort
