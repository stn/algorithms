import React from 'react'
import { Scatter } from 'react-chartjs-2'

import Markdown from '../../components/Markdown'

const data = {
  datasets: [
    {
      label: 'BM_SelectionSortAsc',
      data: [
        { x: 8, y: 0.29632588584003167 },
        { x: 16, y: 0.3386148671211506 },
        { x: 32, y: 0.5303803694878331 },
        { x: 64, y: 1.3054224366392249 },
        { x: 128, y: 3.946146313456085 },
        { x: 256, y: 13.90286835628792 },
        { x: 512, y: 52.68102173255601 },
        { x: 1024, y: 206.37747635831124 },
        { x: 2048, y: 811.2070189125108 },
        { x: 4096, y: 3225.983829493132 },
        { x: 8192, y: 12851.1186181819 },
        { x: 16384, y: 51360.93485714253 },
        { x: 32768, y: 205750.90466666702 },
      ],
      backgroundColor: 'rgba(255, 99, 132)',
      borderColor: 'rgba(255, 99, 132, 0.2)',
      showLine: true,
    },
    {
      label: 'BM_SelectionSortDesc',
      data: [
        { x: 8, y: 0.29648041611878523 },
        { x: 16, y: 0.3397541153050813 },
        { x: 32, y: 0.5042048000745628 },
        { x: 64, y: 1.1830598854009622 },
        { x: 128, y: 4.494953076155436 },
        { x: 256, y: 15.477052491576238 },
        { x: 512, y: 56.40553047939029 },
        { x: 1024, y: 213.49679301904007 },
        { x: 2048, y: 828.5450983412466 },
        { x: 4096, y: 3260.877493023289 },
        { x: 8192, y: 12939.579796296664 },
        { x: 16384, y: 51426.22042857146 },
        { x: 32768, y: 206051.29599999942 },
      ],
      backgroundColor: 'rgba(54, 162, 235)',
      borderColor: 'rgba(54, 162, 235, 0.2)',
      showLine: true,
    },
    {
      label: 'BM_SelectionSortRandom',
      data: [
        { x: 8, y: 0.34587814930716737 },
        { x: 16, y: 0.5156531680118692 },
        { x: 32, y: 0.9581693885405766 },
        { x: 64, y: 2.2329746058668967 },
        { x: 128, y: 6.107572972063848 },
        { x: 256, y: 18.959671651888186 },
        { x: 512, y: 64.13209211739675 },
        { x: 1024, y: 230.55547035581836 },
        { x: 2048, y: 870.6072788103165 },
        { x: 4096, y: 3349.4316507176486 },
        { x: 8192, y: 13100.205999999587 },
        { x: 16384, y: 52047.10015384634 },
        { x: 32768, y: 207055.83866666898 },
      ],
      backgroundColor: 'rgba(255, 206, 86)',
      borderColor: 'rgba(255, 206, 86, 0.2)',
      showLine: true,
    },
  ],
  options: {
    responsive: true,
  },
}

function SelectionSort() {
  return (
    <>
      <h2>Selection Sort</h2>
      <div>
        <Markdown>{`
配列の一番小さい要素を見つけ、それを最初の位置の要素と交換する。
次に、2番目に小さい要素を見つけ、2番目の位置にある要素と交換する。
これを最後の要素まで繰り返す。

~~~c++
void selection_sort(int *arr, int n) {
  for (int i = 0; i < n - 1; ++i) {
      int min = i;
      for (int j = i + 1; j < n; ++j) {
          if (arr[j] < arr[min]) {
              min = j;
          }
      }
      int tmp = arr[i];
      arr[i] = arr[min];
      arr[min] = tmp;
  }
}
~~~

常に$O(n^2)$回の比較を行うが交換の回数は少ないため、
項目が非常に大きくキーが小さいといった交換のコストが大きいとき、
選択整列法は有効な方法である。
        `}</Markdown>
        <Scatter data={data} />
      </div>
    </>
  )
}

export default SelectionSort
